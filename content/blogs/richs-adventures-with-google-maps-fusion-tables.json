{
  "date": "2012-08-04T23:00:00.000Z",
  "title": "Rich's Adventures with Google Maps & Fusion Tables",
  "body": "Something came along the other day that caught my attention. The 'brief' was to create an interactive map that displayed countries based on a 'risk' level. That was it. (after all, it was just a prototype, to see a) what was possible and b) the best way to go about this.)\\\n\\\nObviously, it was Google Maps that was the immediate front-runner for this.. I've tinkered with gmaps a little in the past, but not really delved into what you can actually achieve. A previous project I'd worked on called for an interactive map,with custom routes that didnt stick to any roads. (I'll cover that in a seperate post).\n\n### Initial steps\n\nMy first foray into coding this hinged on what I'd done in previous projects.. namely plotting the points using some very handy sites that let you plot your points, then gave you the javascript code for the latitude and longitude for each point.\\\n\\\nAfter mapping out two countries by hand, I realised that this was futile task. Not only would it take you aaages to map out each country that you wanted (depending on how 'close' to the actual country borders you wanted to go. Having fairly coarse points worked ok when zoomed right out, but as soon as you zoomed in closer, you could see that the points did not match the borders), it would also be a right pain to maintain, or add new 'countries'.\\\n\\\nPlotting points by hand = off the cards. Time for a re-think.\n\n### KML files\n\nA bit more research, and I discovered KML (Keyhole Markup Language) files. Now some of you may be thinking \"err.. little late to the game, arn't you?\". Well, yes. But hey-ho!\\\n\\\nSo KML files are basically XML files, which can contain one or more <Placemark> elements. These, in turn can contain one or more <Geometry> elements.\\\nA quick google around brought me a KML file of all the worlds country borders in one handy file. Bonus!\\\nHalf my work is done!\\\n\\\nQuickly dropping the required code into a page resulted in.... nothing. Just a normal map. no borders or anything. Hmm.\\\n\\\nA quick scan of the documentation resulted in the titbit of information I missed earlier. In order for Google Maps to successfully parse a KML file, it needs to be hosted on a public, internet-facing site. Doh!\\\nIt makes sense though, Google reads the information in the file, then geo-codes the locations on their servers, and sends back the map layers to you.\\\n\\\nOk, attempt no2. Upload the KML file to my Google Drive lcoation, and amend the source code accordingly. a quick Ctrl-F5 then resulted in the map appearing. Success! However, it had put a nice blue border around EVERY country on the map. Hmm, lets sort that out.\\\n\\\nA scan of the KML file, and I spotted the <Style> sections.. perfect!\\\nQuick amend to that, re-upload and re-test. Better now.\\\n\\\nNow, I the brief was to have a 'risk' level associated with a country. So, quick read up of the documentation again, and it throws up a gotcha - you can only have up to 5 styles per KML layer.\\\nLuckily, in my case, I only required 3, so it's all good.\\\n\\\nOnto my next issue.. Maintainability. To be able to add new countries, you'd need to edit the KML, add all your new placemarkers in etc. For some reason, I can't see a client spending the time to do this. (It's not very easy, or a quick process). So, whilst it does what I wanted it to do.. there has to be a better way.\n\n### Enter Fusion Tables\n\n\\\nI'd not come across Fusion Tables before.. I've seen a few posts on StackOverflow etc when researching KML files that mentioned them. Bit of reading up I think!\\\n\\\nThe premis of Fusion Tables is simple.. it's basically a (simple) database-in-the-cloud. Columns, Rows.. all that jazz.\\\nThe clever part of Fusion Tables, is the fact you can merge data from one table, with that of another to create a third table, which you use on your map.\\\nYou can search for publicly available tables that contain the information you want. In my case, a search for 'World Country Borders' threw up a result.. a public table that contains all the countries of the world, with the lat/lng of the borders. the special column for me was the 'geometry' column. This effectivley holds a KML file for each country (see KML above).\\\n\\\nI downloaded the data, re-uploaded to my GDrive account, and added a new 'RiskLevel' column. There we go, there's all the countries of the world, with all the KML data needed in one fell swoop!\n\n#### A few things to note about using Fusion Table data in your maps.\n\nV3 of Google Maps no longer requires an API key. Fusion Tables, however do. no biggie - just go to the [Google API Console](https://code.google.com/apis/console), and create yourself an api key.\\\nOnce you have an api key, click on 'Services' in the left menu, and pick and choose the services you require.\n\n![](/img/fusiontables.png)\n\nOnce you have your table already set up and ready to go, adding that data to your map is remarkably easy:\n\n```\n<div id=\"googleMap\" style=\"height: 500px;width:500px\"></div>  \n    \n  <script type=\"text/javascript\">  \n    \n  // the URL to Google's fusion table service  \n  var queryurl = \"https://www.googleapis.com/fusiontables/v1/query?key=xxxxxxxxxx&sql=\";  \n  var table = \"1I7F5us4zbKrwOsPMsc8jUqBwkI9MwbIHNpRtEgM\";  \n    \n  /* map variables */  \n  var mapCenter = new google.maps.LatLng(53.739358, -2.445720);  \n  var mapStyles = [  \n          { featureType: \"water\", stylers: [{ color: \"#808080\"}] }, { featureType: \"administrative.country\", stylers: [{ visibility: \"on\"}] }, { featureType: \"landscape\", elementType: \"geometry.stroke\", stylers: [{ visibility: \"off\"}] }, { featureType: \"poi\", stylers: [{ visibility: \"off\"}] }, { featureType: \"administrative.province\", stylers: [{ visibility: \"off\"}] }, { featureType: \"administrative.country\", stylers: [{ visibility: \"on\"}] }  \n    ];  \n    \n  var mapOptions = {  \n     center: mapCenter,  \n     zoom: 3,  \n     mapTypeId: google.maps.MapTypeId.ROADMAP,  \n     styles: mapStyles  \n    };  \n    \n  var map = new google.maps.Map(document.getElementById(\"googleMap\"), mapOptions);  \n    \n  var fusionLayer = new google.maps.FusionTablesLayer({  \n    query: {  \n     select: \"'geometry'\",  \n     from: table  \n     },  \n    map: map,  \n    });  \n    \n```\n\nMostly all normal Google maps stuffs, apart from the final variable. you create a new google.maps.FusionTablesLayer(), and select the column(s) that you want. In this case, the 'geometry' column held everything that I needed. And, to top it all off, clicking on a country will open the standard google InfoWindow with some data, without any extra code or effort.\\\n\\\nNow I'd got the data loaded (and it's rapid.. quicker than using the KML files), it was time to differentiate my countries into their 'risks'. (You may remember the 'RiskLevel' column I added above.. this is where it comes into play).\\\nStyling a FusionTable map is much easier, as with KML files, you cannot use javascript to style the maps.. therefore, that means no dynamic styling. :(\\\nAdding a style to the layer is easy..\n\n```\nvar fusionLayer = new google.maps.FusionTablesLayer({  \n       query: {  \n         select: \"'geometry'\",  \n         from: tablename  \n       },  \n       styles: [  \n         {    \n           where : \"RiskLevel = ''\",  \n           polygonOptions: {  \n              fillColor: layerStyles.blank.color,  \n              fillOpacity: layerStyles.blank.opacity  \n            }  \n          },  \n          {  \n            where: \"RiskLevel = 'Low'\",  \n            polygonOptions: {  \n              fillColor: layerStyles.low.color,  \n              fillOpacity: layerStyles.low.opacity  \n            }  \n          }  \n        ],  \n       map: map,  \n      });  \n```\n\nAs you can see, you can 'where' clauses in your style elements, which will only be applied if that clause matches.\\\n\\\nThis code resulted in a map of the world, with those countries that I'd filled in information in in my FusionTable, being output on the map, with the styles set above.\n\n![](/img/map.png)\n\nHow cool is that? and (once you know how it all works, and have everything set up), remarkably easy to work with, and edit.\\\nOh yeah, about editing.. edit the data in your FusionTable, refresh your map, and bammo! instant update :)\\\nNo more having to compress large KML files, upload etc. It's all in the cloud, and it's all instant!\\\n\\\n\\\nSo there you go, hopefully I've given you some tips on how to use Fusion Tables, and the benefit they could bring. (I'm currently extending my initial test to be something more useful.. with multiple tables, and interactive-ness to it)",
  "tags": [
    "javascript"
  ],
  "excerpt": "Rich's Adventures with Google Maps & Fusion Tables"
}