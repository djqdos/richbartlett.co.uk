{
  "date": "2015-11-11T00:00:00.000Z",
  "title": "Determining if a point on a Google Map is in a particular polygon",
  "body": "!--StartFragment-->\n\nI was tasked recently with a proof-of-concept piece for a client of ours, utilizing Google maps.\\\nThe task was to extend the current map they have, which contains markers on the map, plus polylines linking them together.\\\n\\\nWhat was now required, is to split the surrounding area in 'zones', then be able to determine if a point on the map, landed in one or more zones.\n\n### The Map\n\nAt this point, we already have a Google map, with the marker points and polylines on, so half of the work is already done. The marker points and routes come in the form on a JSON object from a web service, so it was a case of extending the functionality of this to incorporate the zonal data.\\\n\\\nThe Zone Data\\\n\\\nWe were given some sample data in the form of ArcGIS data files, so the first task is to work out how to transform this data into something we could use that could integrate with what we have.\\\nAs we are using Google maps for the actual mapping element, a little research suggested KML files.\\\nThis was great news, as I've worked with KML files in the past, for other projects. ([see here](http://richsadventuresindevelopment.blogspot.com/2012/08/richs-adventures-with-google-maps.html))\\\n\\\nI discovered a website where you could upload the ArcGIS files, and it would hand you back either a KML file, which is a single file containing your polygon data, with no other data; or a KMZ file - which is a zip file containing the kml file, plus supporting information, such as markers etc.\\\nI didnt require all of this information, as we already had that.. so, KML file it was.\n\n### KML - The good and the bad\n\n[](https://www.blogger.com/blogger.g?blogID=7500363934385386678)Adding in a new KML layer to an existing map is really easy:\n\n```\n  var ctaLayer = new google.maps.KmlLayer({\n    url: 'http://googlemaps.github.io/js-v2-samples/ggeoxml/cta.kml',\n    map: map\n  });\n```\n\nand thats it. Refresh your page, and the kml layer appears.\\\nThere is one gotcha though: the KML files have to be on an internet-facing location, where Google can see it to load the data.\\\nQuickly upload the files to a temporary location, and off we go!\n\n![](/img/kmlmap1.png)\n\nNext, was to research how to interact with this new layer to see if each point was in a layer.\\\n[](https://www.blogger.com/blogger.g?blogID=7500363934385386678)This proved a little tricky, until I came across an article on StackOverflow, that mentioned that in order to *interact* with this new data, I had to actually plot the points myself, rather than just use the (much easier to use) kml layer.\n\n### One step forward, two steps back\n\nBecause I can't interact with a kml layer, the next task to was do it manually. KML (or [Keyhole Markup Language](https://developers.google.com/kml/documentation/kmlreference)) files are based on XML files, so dealing with these should be fairly straigh-forward. Opening the KML file, I saw that it contains one or more\n\n```\n<Folder>\n```\n\nelements. within this, are a few more elements detailing the style of the polygon, plus a name etc.\\\nThe one I needed is\n\n```\n<polygon>\n```\n\n. This contains a child-element of\n\n```\n<coordinates>\n\n```\n\nThis contained one big list of co-ordinates that detail the polygon.\\\nFirst task here was to get that data into a format I can use. Split that string up first by spaces, so I end up with a collection of strings like so:\n\n```\n-1.8117973000000003,52.63122890000001\n```\n\nThen, split each string into its constituent parts of Longitute and Latitude.\\\n[](https://www.blogger.com/blogger.g?blogID=7500363934385386678)A quick edit of the web service later, and I have a function that will load my KML file, read out the co-ordinates, and return me a collection of GeoCoordinates, which I can use\\\n\\\nA quick amend of the javascript later, and I have the polylines drawn:\n\n![](/img/kmlmap2.png)\n\nNo visible difference, but crucially, I can now interact with the zones (in purple).\n\n### The Interaction\n\n\\\nOnce I have my zones plotted on the map, its time to check where the markers sit, in relation to the zone.\\\nI have a collection of route points (my map markers), and a collection of polygons (my Zone data).\\\n\\\n[](https://www.blogger.com/blogger.g?blogID=7500363934385386678)Iterating through each polygon, I then check each map marker in turn to see if the latitude & longitude of that point is inside the polygon:\n\n```\n function DoPointsIntersectPolygon() {\n                \n                _.each(self.generatedPolygons, function (poly, polyIndex) {\n                    _.each(self.markers, function (marker, markerIndex) {\n                        var latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());\n                        if (google.maps.geometry.poly.containsLocation(latlng, poly) === true) {\n\n                            console.log(marker.title, \" is in \", self.zonepolylines[polyIndex].Name, \" zone\");\n                        }\n                    });\n                });\n            } \n```\n\nIf it matches, then I render out to the browsers console (Firebug for the win!), detailing which map point is in which zone.\\\n\\\nFor now, this proof of concept is complete, and successfully proves what I set out to do.\\\nThere will be lots more refinement, and refactoring of code later on, but for now, job done!",
  "excerpt": "Determining if a point on a Google Map is in a particular polygon",
  "tags": [
    "javascript"
  ]
}